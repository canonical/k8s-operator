# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint-mock, lint, unit, static, coverage-report, coverage-xml

[vars]
lib_path = {toxinidir}/charms/worker/k8s/lib
src_path = {toxinidir}/charms/worker/k8s/src {[vars]lib_path}/charms/k8s {toxinidir}/charms/worker/k8s/scripts
tst_path = {toxinidir}/tests/ {toxinidir}/charms/worker/k8s/tests/
all_path = {[vars]tst_path} {[vars]src_path}

[testenv]
setenv =
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:format]
allowlist_externals = tox
description = Apply coding style standards to code
deps =
    ruff
commands =
    ruff format {[vars]all_path}
    ruff check --fix {[vars]all_path}

[testenv:lint-mock]
description = Provide mock lint commands to use ruff instead
commands =
    python -c "'pydocstyle'"
    python -c "'codespell'"
    python -c "'flake8'"
    python -c "'black'"
    python -c "'isort'"
    python -c "'pylint'"
    python -c "'flake8-docstrings'"
    python -c "'flake8-docstrings-complete'"
    python -c "'flake8-builtins'"
    python -c "'flake8-test-docs'"
    python -c "'pep8-naming'"

[testenv:lint]
description = Check code against coding style standards
setenv =
  PYTHONPATH = {envdir}{:}{[vars]lib_path}
deps =
    mypy
    ruff
    pydantic[mypy]
    types-PyYAML
commands =
    ruff format --check {[vars]all_path}
    ruff check {[vars]all_path}
    mypy {[vars]all_path}

[testenv:unit]
allowlist_externals = tox
deps =
    -r test_requirements.txt
commands =
    tox -c {toxinidir}/charms/worker/k8s -e unit -- {posargs}

[testenv:coverage-report]
allowlist_externals = tox
commands =
    tox -c {toxinidir}/charms/worker/k8s -e coverage-report

[testenv:coverage-xml]
allowlist_externals = tox
commands =
    tox -c {toxinidir}/charms/worker/k8s -e coverage-xml

[testenv:static]
description = Run static analysis tests
deps =
    bandit[toml]
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]all_path}

[testenv:{integration,integration-k8s,integration-etcd,integration-ceph,integration-upgrade}]
description = Run integration tests
deps = -r test_requirements.txt
commands =
    pytest -v --tb native \
      -s {toxinidir}/tests/integration \
      --log-cli-level INFO \
      --log-format "%(asctime)s %(levelname)s %(message)s" \
      --log-date-format "%Y-%m-%d %H:%M:%S" \
      --exitfirst \
      --crash-dump=on-failure \
      --crash-dump-args='-j snap.k8s.* --as-root' \
      {posargs}

[testenv:run-terraform-e2e-tests]
description = Run terraform e2e tests
deps = {[testenv:integration]deps}
commands_pre = python3 {toxinidir}/tests/integration/terraform_setup.py
commands = {[testenv:integration]commands}

[testenv:src-docs]
allowlist_externals=sh
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
description = Generate documentation for src
deps =
    lazydocs
commands =
    ; can't run lazydocs directly due to needing to run it on src/* which produces an invocation error in tox
    sh generate-src-docs.sh
