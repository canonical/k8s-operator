# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint-mock, lint, unit, static, coverage-report, coverage-xml

[vars]
charm_path   = {toxinidir}/charms/worker/k8s
lib_path     = {[vars]charm_path}/lib
src_path     = {[vars]charm_path}/src
charm_lib    = {[vars]lib_path}/charms/k8s
scripts_path = {[vars]charm_path}/scripts
test_base    = {toxinidir}/tests
int_path     = {[vars]test_base}/integration
unit_path    = {[vars]test_base}/unit
all_path     = {[vars]test_base} {[vars]charm_path}
uv_sync_flags =
    --project
    {[vars]charm_path}
uv_run       =  uv run --project {[vars]charm_path} --directory {[vars]charm_path}


[testenv]
setenv =
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:lint-mock]
description = Provide mock lint commands to use ruff instead
commands =
    python -c "'pydocstyle'"
    python -c "'codespell'"
    python -c "'flake8'"
    python -c "'black'"
    python -c "'isort'"
    python -c "'pylint'"
    python -c "'flake8-docstrings'"
    python -c "'flake8-docstrings-complete'"
    python -c "'flake8-builtins'"
    python -c "'flake8-test-docs'"
    python -c "'pep8-naming'"

[testenv:lint]
description = Check code against coding style standards
runner = uv-venv-lock-runner
dependency_groups = lint
uv_sync_flags = {[vars]uv_sync_flags}
envdir = .tox/lintenv
commands =
    {[vars]uv_run} ruff format --check {[vars]all_path}
    {[vars]uv_run} ruff check {[vars]all_path}
    {[vars]uv_run} mypy {[vars]all_path}

[testenv:format]
description = Apply coding style standards to code
runner = uv-venv-lock-runner
dependency_groups = lint
uv_sync_flags = {[vars]uv_sync_flags}
envdir = .tox/lintenv
commands =
    {[vars]uv_run} ruff format {[vars]all_path}
    {[vars]uv_run} ruff check --fix {[vars]all_path}

[testenv:unit]
description = Run unit tests
runner = uv-venv-lock-runner
dependency_groups = unit
uv_sync_flags = {[vars]uv_sync_flags}
envdir = .tox/unit
setenv =
    PYTHONPATH = {[vars]src_path}:{[vars]lib_path}
commands =
    {[vars]uv_run} coverage run --source={[vars]src_path},{[vars]charm_lib} \
        -m pytest {[vars]unit_path} -vv \
        --basetemp={envtmpdir} \
        --tb native -s {posargs}
    {[vars]uv_run} coverage report --show-missing

[testenv:coverage-report]
description = Create test coverage report
runner = uv-venv-lock-runner
dependency_groups = unit
envdir = .tox/unit
uv_sync_flags = {[vars]uv_sync_flags}
commands =
    {[vars]uv_run} coverage report

[testenv:coverage-xml]
description = Create test coverage report
runner = uv-venv-lock-runner
dependency_groups = unit
envdir = .tox/unit
uv_sync_flags = {[vars]uv_sync_flags}
commands =
    {[vars]uv_run} coverage xml

[testenv:static]
description = Run static analysis tests
runner = uv-venv-lock-runner
dependency_groups = static
envdir = .tox/static
uv_sync_flags = {[vars]uv_sync_flags}
commands =
    {[vars]uv_run} bandit -c {[vars]charm_path}/pyproject.toml -r {[vars]charm_path}

[testenv:{integration,integration-k8s,integration-etcd,integration-ceph,integration-upgrade}]
description = Run integration tests
deps = -r test_requirements.txt
commands =
    pytest -v --tb native \
      -s {toxinidir}/tests/integration \
      --log-cli-level INFO \
      --log-format "%(asctime)s %(levelname)s %(message)s" \
      --log-date-format "%Y-%m-%d %H:%M:%S" \
      --exitfirst \
      --crash-dump=on-failure \
      --crash-dump-args='-j snap.k8s.* --as-root' \
      {posargs}

[testenv:deploy-terraform]
description = Deploy a k8s-operator cluster with terraform
deps = {[testenv:integration]deps}
commands = python3 {toxinidir}/tests/integration/terraform/setup.py  {posargs}
passenv = TF_VAR_*

[testenv:src-docs]
allowlist_externals=sh
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
description = Generate documentation for src
deps =
    lazydocs
commands =
    ; can't run lazydocs directly due to needing to run it on src/* which produces an invocation error in tox
    sh generate-src-docs.sh

[testenv:update-dashboards]
description = Run the Grafana dashboards update script
runner = uv-venv-lock-runner
dependency_groups = update
envdir = .tox/update
uv_sync_flags = {[vars]uv_sync_flags}
commands =
    {[vars]uv_run} --directory {[vars]charm_path} {[vars]scripts_path}/update_dashboards.py

[testenv:update-alert-rules]
description = Run the AlertManager rules update script
runner = uv-venv-lock-runner
dependency_groups = update
envdir = .tox/update
uv_sync_flags = {[vars]uv_sync_flags}
commands =
    {[vars]uv_run} --directory {[vars]charm_path} {[vars]scripts_path}/update_alert_rules.py
