# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

# Learn more about testing at: https://juju.is/docs/sdk/testing

"""Unit tests for config.proxy_service."""

from pathlib import Path
from unittest import mock

import config.proxy_service
import ops.testing
import pytest
from charm import K8sCharm

from charms.contextual_status import ReconcilerError


@pytest.fixture(params=["worker", "control-plane"])
def harness(request):
    """Craft a ops test harness.

    Args:
        request: pytest request object
    """
    meta = Path(__file__).parent / "../../../charmcraft.yaml"
    if request.param == "worker":
        meta = Path(__file__).parent / "../../../../charmcraft.yaml"
    harness = ops.testing.Harness(K8sCharm, meta=meta.read_text())
    harness.disable_hooks()
    harness.begin()
    harness.charm.is_worker = request.param == "worker"
    yield harness
    harness.cleanup()


def test_invalid_service(harness):
    """Test that the proxy service config handles invalid services."""
    harness.update_config({"proxy-applications": "invalid-service"})
    with pytest.raises(ReconcilerError) as ie:
        config.proxy_service.apply(harness.charm)
    assert "'invalid-service' is not a valid ProxyApplication" in str(ie.value)


@mock.patch("pathlib.Path.write_text")
@mock.patch("pathlib.Path.read_text")
@mock.patch("pathlib.Path.exists")
@mock.patch("pathlib.Path.mkdir")
@mock.patch("os.getenv")
@mock.patch.object(config.proxy_service, "systemd")
def test_valid_service(systemd, getenv, mkdir, exists, read_text, write_text, harness):
    """Test that the proxy service config handles valid services."""
    juju_app = harness.charm.app.name
    service = config.proxy_service.CONTAINERD_SERVICE_NAME
    harness.update_config({"proxy-applications": "containerd"})
    exists.return_value = True
    read_text.return_value = "replace me"
    getenv.return_value = "value"
    expected = (
        "[Service]\n"
        f"# Autogenerated by {juju_app=} for {service=}\n"
        "Environment=HTTPS_PROXY=value\n"
        "Environment=https_proxy=value\n"
        "Environment=HTTP_PROXY=value\n"
        "Environment=http_proxy=value\n"
        "Environment=NO_PROXY=value\n"
        "Environment=no_proxy=value"
    )

    config.proxy_service.apply(harness.charm)

    mkdir.assert_called_once_with(parents=True, exist_ok=True)
    exists.assert_called_once_with()
    write_text.assert_called_once_with(expected, encoding="utf-8")
    systemd.daemon_reload.assert_called_once_with()
    systemd.service_running.assert_called_once_with(service)
    systemd.service_restart.assert_called_once_with(service)
