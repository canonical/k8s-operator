# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

# Learn more at: https://juju.is/docs/sdk

"""proxy service.

This module provides functionality to apply proxy settings to systemd services
based on the Juju model configuration.
"""

import logging
import os
from typing import Optional
from urllib.parse import urlparse

import ops
from literals import CONTAINERD_HTTP_PROXY, CONTAINERD_SERVICE_NAME

from charms.contextual_status import on_error
from charms.operator_libs_linux.v1 import systemd

# Log messages can be retrieved using juju debug-log
log = logging.getLogger(__name__)


PROXY_SERVICES = {CONTAINERD_SERVICE_NAME: CONTAINERD_HTTP_PROXY}
PROXY_ENABLE_CONTAINERD = "model-proxy-enable-containerd"


class ProxyUrlError(Exception):
    """Custom exception for invalid proxy URLs."""

    pass


def _validate_proxy_url(url: Optional[str]) -> None:
    """Check if the given URL is valid for use as a proxy.

    Args:
        url (str): The URL to validate.

    Raises:
        ProxyUrlError: If the URL is malformed or does not conform to expected proxy URL formats.
    """
    try:
        parsed = urlparse(url)
        parsed.port
    except ValueError as e:
        # urlparse can raise ValueError if the URL is malformed
        raise ProxyUrlError(f"Invalid proxy URL: {url=}. {e.args}.") from e
    if parsed.scheme not in ("http", "https"):
        raise ProxyUrlError(
            f"Invalid proxy URL: {url=}. Only 'http' and 'https' schemes are supported."
        )
    if not parsed.hostname and not parsed.netloc:
        raise ProxyUrlError(
            f"Invalid proxy URL: {url=}. It must include a valid hostname or netloc."
        )


def _get_proxy_systemd_config(juju_app: str, service: str) -> str:
    """Retrieve the Juju model config proxy values.

    Args:
        juju_app (str): The name of the Juju application.
        service (str): The name of the service for which to apply proxy settings.

    Returns:
        str: A multi-line string containing the systemd [Service] section configuration
        with proxy environment variables.

    Raises:
        ProxyUrlError: If any of the proxy URLs are invalid.
    """
    proxy_env_keys = [
        "JUJU_CHARM_HTTPS_PROXY",
        "JUJU_CHARM_HTTP_PROXY",
        "JUJU_CHARM_NO_PROXY",
    ]
    settings = {k: os.getenv(k) for k in proxy_env_keys}
    for k, v in settings.items():
        if "NO_PROXY" not in k:
            _validate_proxy_url(v)

    systemd_lines = []
    for k, v in sorted(settings.items()):
        if v:
            env_key = k.split("JUJU_CHARM_")[-1]
            systemd_lines.append(f"Environment={env_key}={v}")
            systemd_lines.append(f"Environment={env_key.lower()}={v}")

    if systemd_lines:
        systemd_lines = [
            "[Service]",
            f"# Autogenerated by {juju_app=} for {service=}",
        ] + systemd_lines
    return "\n".join(systemd_lines) + "\n"


@on_error(ops.BlockedStatus("juju-http(s)-proxy is invalid."), ProxyUrlError)
def apply(charm: ops.CharmBase) -> None:
    """Apply the current proxy settings to the systemd service files.

    Args:
        charm (ops.CharmBase): The charm instance to apply the proxy settings to.

    """
    proxy_containerd = bool(charm.config.get(PROXY_ENABLE_CONTAINERD))

    juju_app = charm.app.name
    for service, path in PROXY_SERVICES.items():
        path.parent.mkdir(parents=True, exist_ok=True)
        existing = path.exists() and path.read_text(encoding="utf-8") or ""
        replacement = proxy_containerd and _get_proxy_systemd_config(juju_app, service) or ""
        if written := existing != replacement:
            log.info("Applying Proxied Environment Settings for %s", service)
            path.write_text(replacement, encoding="utf-8")
            systemd.daemon_reload()
        if written and systemd.service_running(service):
            # Reload the service to apply the new settings
            log.info("Restarting %s", service)
            systemd.service_restart(service)
        else:
            log.info("No changes to proxy settings for %s, skipping reload", service)
