# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

# Learn more at: https://juju.is/docs/sdk

"""proxy service.

This module provides functionality to apply proxy settings to systemd services
based on the Juju model configuration.
"""

import logging
import os

import ops
from literals import CONTAINERD_HTTP_PROXY, CONTAINERD_SERVICE_NAME

from charms.operator_libs_linux.v1 import systemd

# Log messages can be retrieved using juju debug-log
log = logging.getLogger(__name__)


PROXY_SERVICES = {CONTAINERD_SERVICE_NAME: CONTAINERD_HTTP_PROXY}
PROXY_ENABLE_CONTAINERD = "proxy-enable-containerd"


def apply(charm: ops.CharmBase) -> None:
    """Apply the current proxy settings to the systemd service files.

    Args:
        charm (ops.CharmBase): The charm instance to apply the proxy settings to.

    Raises:
        ops.ReconcilerError: If the proxy-application configuration is invalid.
    """
    proxy_containerd = bool(charm.config.get(PROXY_ENABLE_CONTAINERD))

    juju_app = charm.app.name
    for service, path in PROXY_SERVICES.items():
        path.parent.mkdir(parents=True, exist_ok=True)
        existing = path.exists() and path.read_text(encoding="utf-8") or ""
        replacement = proxy_containerd and _get_proxy_systemd_config(juju_app, service) or ""
        if written := existing != replacement:
            log.info("Applying Proxied Environment Settings for %s", service)
            path.write_text(replacement, encoding="utf-8")
            systemd.daemon_reload()
        if written and systemd.service_running(service):
            # Reload the service to apply the new settings
            log.info("Restarting %s", service)
            systemd.service_restart(service)
        else:
            log.info("No changes to proxy settings for %s, skipping reload", service)


def _get_proxy_systemd_config(juju_app: str, service: str) -> str:
    """Retrieve the Juju model config proxy values.

    Args:
        juju_app (str): The name of the Juju application.
        service (str): The name of the service for which to apply proxy settings.

    Returns:
        str: A multi-line string containing the systemd [Service] section configuration
        with proxy environment variables.
    """
    proxy_env_keys = [
        "JUJU_CHARM_HTTPS_PROXY",
        "JUJU_CHARM_HTTP_PROXY",
        "JUJU_CHARM_NO_PROXY",
    ]
    proxy_settings = []
    for key in proxy_env_keys:
        env_value = os.getenv(key)
        if env_value:
            env_key = key.split("JUJU_CHARM_")[-1]
            proxy_settings.append(f"Environment={env_key}={env_value}")
            proxy_settings.append(f"Environment={env_key.lower()}={env_value}")
    if proxy_settings:
        proxy_settings = [
            "[Service]",
            f"# Autogenerated by {juju_app=} for {service=}",
        ] + proxy_settings
    return "\n".join(proxy_settings)
